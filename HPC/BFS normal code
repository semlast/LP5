#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Graph {
    int V;
    vector<int> *adj;

public:
    Graph(int V); 
    void addEdge(int v, int w);
    void BFS(int v);
};

Graph::Graph(int V) {
    this->V = V;
    adj = new vector<int>[V];
}

void Graph::addEdge(int v, int w) {
    adj[v].push_back(w);
}

void Graph::BFS(int v) {
    vector<bool> visited(V, false);
    queue<int> queue;
    visited[v] = true;
    queue.push(v);

    while (!queue.empty()) {
        v = queue.front();
        cout << v << " ";
        queue.pop();
        for (auto i = adj[v].begin(); i != adj[v].end(); ++i) {
            if (!visited[*i]) {
                visited[*i] = true;
                queue.push(*i);
            }
        }
    }
}

int main() {
    Graph g(4);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);

    cout << "Breadth First Traversal: ";
    g.BFS(2); // Start BFS from vertex 2
    cout << endl;

    return 0;
}
