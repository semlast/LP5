#include <iostream>
#include <omp.h>

void merge(int array[], int low, int mid, int high) {
    int temp[30];
    int i = low, j = mid + 1, k = low;

    while (i <= mid && j <= high) {
        if (array[i] <= array[j]) {
            temp[k++] = array[i++];
        } else {
            temp[k++] = array[j++];
        }
    }

    while (i <= mid) {
        temp[k++] = array[i++];
    }

    while (j <= high) {
        temp[k++] = array[j++];
    }

    for (i = low; i <= high; i++) {
        array[i] = temp[i];
    }
}

void mergesort(int array[], int low, int high) {
    int mid;

    if (low < high) {
        mid = (low + high) / 2;
        #pragma omp parallel sections num_threads(2)
        {
            #pragma omp section
            {
                mergesort(array, low, mid);
            }
            #pragma omp section
            {
                mergesort(array, mid + 1, high);
            }
        }
        merge(array, low, mid, high);
    }
}

int main() {
    int array[50];
    int i, size;
    std::cout << "Enter total number of elements:" << std::endl;
    std::cin >> size;
    std::cout << "Enter " << size << " elements:" << std::endl;
    for (i = 0; i < size; i++) {
        std::cin >> array[i];
    }
    mergesort(array, 0, size - 1);
    std::cout << "Sorted Elements:" << std::endl;
    for (i = 0; i < size; i++) {
        std::cout << array[i] << " ";
    }
    std::cout << std::endl;
    return 0;
}


output:
Enter total no. of elements:
5
Enter 5 elements:
5
6
4
3
8
Sorted Elements as follows:
3 4 5 6 8 



output input:
enter total number of elements : 9
enter 9 elements : 1 7 8 9 5 6 4 6 2
